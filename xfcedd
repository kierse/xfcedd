#!/usr/bin/perl -w

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#
#   Application:    xfcedd (Xfce Desktop Daemon)
#
#   Author:         Kier Elliott
#
#   Date:           01/02/2005
#
#   Description:    The xdce desktop daemon was designed to add a 
#                   little flavor to the xfce desktop.  It allows a user
#                   to specify a directory of desktop images to choose
#                   from.  The Daemon will then randomly select an image
#                   (after a specified delay) and update the Xfce desktop.
#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#
#   Subversion Info:
#     $LastChangedBy$
#     $Date$
#     $Rev$
#     $URL$
#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

use strict;

use POSIX;
use IO::Socket::INET;
use Data::Dumper;

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Main																				  #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

# daemon variables
#
my %Vars = 
(
	"delay" => "3600",
	"file" => "",
	"directory" => "",
	"log" => 1,
	"size" => 50,
	"cache" => [],
	"extensions" => "gif|png|jpg|jpeg",
);

my $version = "0.4.0";
my $path = $ENV{'HOME'} . "/.config/xfce4/xfcedd/.xfcedd=";
my $log_file = $ENV{'HOME'} . "/.config/xfce4/xfcedd/xfcedd.log";
my $config_file = $ENV{'HOME'} . "/.config/xfce4/xfcedd/xfcedd.conf";

# check if user is requesting help or versioning information
#
if( scalar @ARGV == 0 or $ARGV[0] =~ /(^-v$)|(^-h$)/i )
{
	displayOptions();
}

else
{
	# verify user didn't enter non-existent command
	# line option(s).
	#
	my ($code, $message) = checkCommandLineOptions(@ARGV);
	displayOptions($message) and exit 
		unless $code;

	# attempt to establish connection with server
	if( my $socket = contactDaemon($path) )
	{
		# send request to server
		print $socket "$message\n";
		
		# read response and print to console
		my $Message = eval( <$socket> );
		my $Response = $Message->[1];

		# if result is good and a message was returned, display it
		print $Response->{Message} . "\n"
			if $Response->{Result} and $Response->{Message};

		# if result was bad display prompt options and given message
		print displayOptions($Response->{Message}) 
			unless $Response->{Result};

		# close socket
		close $socket;
	}

	# server isn't running, rectify that
	else
	{
		# if kill command was given and the daemon isn't
		# running, there is no point in starting it.  Therefore
		# only start daemon if return code was 1
		if( $code eq "1" )
		{
			# load config file
			readConfigFile($config_file);

			my $Commands = eval( $message );
			updateRunTimeVariables(@$Commands);

			startDaemon($path);
		}
		else
		{
			print "server not running\n";
		}
	}
}

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Methods																			  #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

sub contactDaemon
{
	my ($path) = @_;

	# check if port descriptor exists at given path
	# if not, set daemon flag to 0
	return unless -e $path;

	# get port of running server
	#
	open(PORT, "<", $path);
	my $port = <PORT>;
	close(PORT);

	# open a socket to running server
	#
	my $socket;
	eval
	{
		$socket = new IO::Socket::INET
		(
			PeerAddr => "Localhost",
			PeerPort => $port,
			Proto    => "tcp",
			Type     => SOCK_STREAM,
		) or die "Couldn't open connection to server: $!\n";
	};

	print "Error: Server is not running..."
		and return if $@;

	return $socket;
}

sub startDaemon
{
	my ($path) = @_;

	print "starting daemon\n";

	require Event::Lib;
	Event::Lib->import();
	
	# need to fork off child process that is
	# not associated with the process that started the parent
	#
	my $pid = fork;
	exit if $pid;
	die "Couldn't fork: $!" unless defined($pid);
	
	# Dissociate from the controlling terminal that started parent
	# and stop being part of whatever process group we had been a member of.
	#
	POSIX::setsid() or die "Can't start a new session: $!";
	
	# must register events with Event::Lib
	#
	event_init();

	# Assign a more appropriate name to running process
	# this is useful in that the running process will appear 
	# as 'xfcedd' rather than '/usr/bin/perl xfcedd'
	#
	$0 = "xfcedd " . join " ", @ARGV;

	# acquire socket
	#
	my $server = new IO::Socket::INET(
		Type      => SOCK_STREAM,
		Reuse     => 1,
		Listen    => 10
	) or die "Couldn't acquire socket: $!\n";
	
	# write out temporary file with port number
	#
	my $socketPort = $server->sockport();
	open(PORT, ">", $path);
	print PORT $socketPort;
	close(PORT);
	
	# create event watchers...
	#
	my %Events;
	%Events = (
		"main"  => event_new($server, Event::Lib->EV_READ, \&clientHandler, \%Events),
   	"timer" => timer_new(sub { timerHandler(\%Events); }),
   	"int"   => signal_new(SIGINT, sub { terminateEventWatchers(\%Events); }),
   	"term"  => signal_new(SIGTERM, sub { terminateEventWatchers(\%Events); }),
   	"hup"   => signal_new(SIGHUP, sub { terminateEventWatchers(\%Events); }),
	);
   
	# ...and add them to the event loop
	#
   $_->add for values %Events;

	# start event loop!
	#
   event_dispatch();	

	# delete the file pointing to the port
	#
	unlink($path);
	
	# close the open socket
	#
	close($server);
}

sub clientHandler
{
	my ($e, $type, $Events) = @_;
	my $socket = $e->fh();
	my $client = $socket->accept();

	# get request from client
	my $message = <$client>;
	$message =~ s/\n//;

   my $kill = 0;
	my $success = 1;
	my $response;

   # if the client didn't send anything,
   # do nothing and return 0
   if( $message eq "" )
   {
		$success = 0;
		$response = "No arguments given - nothing to do!";
   }
   else
   {
   	# there was a problem encountered while 
   	# evaluating the client message, do nothing
   	# and return 0
   	my $Commands = eval( $message );
   	if( $@ )
   	{
			$success = 0;
			$response = "Problem evaluating client message";
   	}
   	else
   	{
			my $Cmd = $Commands->[1];
   		if( $Cmd->{Command} eq "-k" )
   		{
				$kill = 1;
				$response = "Server shutdown complete";
   			terminateEventWatchers($Events);
   		}
   		else
   		{
   			($success, $response) = updateRunTimeVariables(@$Commands);
				if( $success eq "1" )
				{
					timerHandler($Events);
				}
   		}
   	}
   }

	my $dumper = new Data::Dumper([["RESPONSE", {Result => $success, Message => $response}]]);
	$dumper->Purity(1);
	$dumper->Indent(1);
	$dumper->Terse(1);

	$message = $dumper->Dump();
	$message =~ s/\n//g;

	# respond to the client and close the connection
	print $client "$message\n";

   # close client connection
   close $client;

   # add the event listener, have to do this or
   # listener will only work once!
   $e->add() unless $kill;
}

sub timerHandler
{
	my ($Events) = @_;

	$$Events{"timer"}->del();
	if($Vars{"delay"} > 0)
	{
		$$Events{"timer"}->add($Vars{"delay"});
	}

	# update display!
	#
	updateDesktop($Events);
}

sub terminateEventWatchers
{
	my ($Events) = @_;

	foreach my $event (values %{$Events})
	{
		$event->del();
	}
}

# method return a code and a message
# 
# code can be one of 3 values:
# 0 - an error was encountered while parsing command line arguments
# 1 - parsing successful 
# 2 - parsing successful - kill command received
sub checkCommandLineOptions
{
	my (@Args) = @_;

	my @Queue;
	my $flag = 1;

	for(my $i = 0; $i < scalar @Args; $i++)
	{
		my $command = {Command => $Args[$i]};
		my $message = "";

		if($Args[$i] eq "-k")
		{
			$flag = 2;
		}
		elsif($Args[$i] eq "-i")
		{
			if( $Args[$i+1] && $Args[$i+1] =~ /^\d$/ )
			{
				if( $Args[$i+1] >= 0 )
				{
					$command->{Value} = $Args[++$i];
				}
				else
				{
					$message = "Illegal value \'$Args[$i+1]\' - optional value must be a number greater than 0";
					$flag = 0;
				}
			}
			else
			{
				$command->{Value} = 0;
			}
		}
		elsif($Args[$i] eq "-t")
		{
			my $data = $Args[++$i] || "";
			if( $data =~ /^\d+$/ )
			{
				$command->{Value} = $data;
			}
			else
			{
				$message = "Illegal value \'$data\' - must provide a number greater than or equal to 0";
				$flag = 0;
			}
		}
		elsif($Args[$i] eq "-f")
		{
			my $extensions = $Vars{extensions};
			my $data = $Args[++$i];

			if( $data =~ /($extensions)$/i )
			{
				$command->{Value} = $data;
			}
			else
			{
				$message = "Illegal value \'$data\' - must be a valid image";
				$flag = 0;
			}
		}
		elsif($Args[$i] eq "-d")
		{
			my $data = $Args[++$i];
			if( -d $data )
			{
				$command->{Value} = $data;
			}
			else
			{
				$message = "Illegal value \'$data\' - must be a valid directory";
				$flag = 0;
			}
		}
		elsif($Args[$i] eq "-l")
		{
			my $data = $Args[++$i];
			if( $data =~ /0|1/ )
			{
				$command->{Value} = $data;
			}
			else
			{
				$message = "Illegal value \'$data\' - must be a 0 or 1";
				$flag = 0;
			}
		}
		elsif($Args[$i] eq "-s")
		{
			my $data = $Args[++$i];
			if( $data > 0 )
			{
				$command->{Value} = $data;
			}
			else
			{
				$message = "Illegal value \'$data\' - must be a number greater than 0";
				$flag = 0;
			}
		}

		# if the flag is set, add the 
		# command to the comman queue
		if( $flag )
		{
			push @Queue, $command;
		}

		# otherwise, return the the flag
		# and message to the caller
		else
		{
			return ($flag, $message);
		}
	}

	unshift @Queue, "UPDATE";

	# build message to send to the server...
	my $dumper = new Data::Dumper([\@Queue]);
	$dumper->Purity(1);
	$dumper->Indent(1);
	$dumper->Terse(1);

	my $command = $dumper->Dump();
	$command =~ s/\n//g;

	return ($flag, $command);
}

# method return a code and a message
# 
# code can be one of 3 values:
# 0 - an error was encountered while parsing command line arguments
# 1 - parsing successful 
# 2 - parsing successful - client requested data, do not reset timers
sub updateRunTimeVariables
{
	my (@Commands) = @_;

	my %NewVars;
	my $flag = 1;
	my $message = "";

	# parse through array and update given values
	#
	foreach my $Cmd ( @Commands )
	{
		next unless ref $Cmd;
		next if $Cmd->{Command} eq "-n";

		if( $Cmd->{Command} eq "-i" )
		{
			my @Cache = @{ $Vars{cache} };
			$message = $Cache[ $#Cache - $Cmd->{Value} ];
			$flag = 2;
		}
		elsif( $Cmd->{Command} eq "-p" )
		{
			my @Cache = @{ $Vars{cache} };

   		# if the cache has more than one image in it
   		# remove the current image so that we can get
   		# at the previous image
   		pop @Cache
   			if scalar @Cache > 1;

   		$NewVars{file} = pop @Cache;

			# assign new cache array to temporary hash
			$NewVars{cache} = \@Cache;
		}
			
		# update delay value
		elsif( $Cmd->{Command} eq "-t" )
		{ 
			if( $Cmd->{Value} >= 0 )
			{
				$NewVars{delay} = $Cmd->{Value}
			}
			else
			{
				$flag = 0;
				$message = "Delay time must be greater than or equal to 0";
				last;
			}
		}

		# update file value
		elsif( $Cmd->{Command} eq "-f" )
		{
			if( -e $Cmd->{Value} )
			{
				$NewVars{file} = $Cmd->{Value};
			}
			elsif( -e $Vars{directory} . "/" . $Cmd->{Value} )
			{
				$NewVars{"file"} = $Vars{directory} . "/" . $Cmd->{Value};
			}
			else
			{
				$flag = 0;
				$message = "File does not exist";
				last;
			}
		}

		# update directory value
		elsif( $Cmd->{Command} eq "-d" )
		{
			if( -d $Cmd->{Value} )
			{
				$Vars{directory} = $Cmd->{Value}
			}
			else
			{
				$flag = 0;
				$message = "Directory does not exist";
				last;
			}
		}

		# update log value
		elsif( $Cmd->{Command} eq "-l" )
		{
			if( $Cmd->{Value} =~ /0|1/ )
			{
				$Vars{log} = $Cmd->{Value}
			}
			else
			{
				$flag = 0;
				$message = "Value passed to log must be 0 or 1";
				last;
			}
		}

		# update max log count value
		elsif( $Cmd->{Command} eq "-s" )
		{
			if( $Cmd->{Value} > 0 )
			{
				$Vars{size} = $Cmd->{Value}
			}
			else
			{
				$flag = 0;
				$message = "Size must be greater than 0";
				last;
			}
		}

		# oops, unknown command line parameter
		else 
		{ 
			$flag = 0;
			$message = "Unknown parameter " . $Cmd->{Command} . "\n";
			last;
		}

		last unless $flag;
	}

	# everything ok, update master variable list
	if( $flag )
	{
		foreach my $key ( keys %NewVars )
		{
			$Vars{$key} = $NewVars{$key};
		}
	}

	return ($flag, $message);
}

sub displayOptions
{
	my ($error) = @_;
	$error ||= "";
	
	# print out command line options in friendly,
	# human readable format
	# 
	print "Error: $error\n" .
			"-----------------------------------------------------------------------------\n"
			if $error;

	print "xfcedd " . $version . " by Kier Elliott.\n" .
			"This software comes with ABSOLUTELY NO WARRANTY.\n" .
			"Usage:  xfcedd [-k | -v | -h | -n | -t <time_delay> -d <image_directory>\n" .
			"                          -f <file_name> -l <boolean> -s <log_size> ]\n" . 
			"   (Put filenames or directories in single quotes (') )\n" .
			"   -k   Kill running daemon\n" .
			"   -v   Print version information\n" .
			"   -h   Display this message\n" .
			"   -t   Set time delay (in seconds) daemon waits before choosing new image\n" .
			"   -f   Set current/startup image.\n" .
			"   -d   Set current/startup image directory.\n" .
			"   -n   Instruct daemon to select next random image and reset timer\n" .
			"   -p   Instruct daemon to display the previous image and reset timer\n" .
			"   -i   Display numbered image from cache. Integer value is optional, defaults to 0\n" .
			"   -l   Turn logging on (1) or off (0).\n" .
			"   -s   Set size of log, must be greater than 0.\n" .
			"\n";
}

sub updateDesktop
{
	my ($Events) = @_;

	# get new image
	#
	my $file;
	if($Vars{"file"})
	{
		$file = $Vars{"file"};
		$Vars{"file"} = "";
	}
	else
	{
		$file = _chooseRandomImage($Vars{"directory"}, $Vars{"cache"});		
	}

	# update desktop using new image...
	#
	_refreshDesktop($file);

	# cache image selection
	#
	_updateCache($file, $Vars{"size"}, $Vars{"cache"});

	_writeToLog("Selected new desktop image: $file\n", $log_file, $Vars{"size"}) if $Vars{"log"};

	return undef;
}

sub readConfigFile
{
	my ($file) = @_;

	if( -e $file )
	{
		my $Config = do $file;

		foreach my $key ( keys %$Config )
		{
			$Vars{$key} = $Config->{$key};
		}
	}
}

sub _chooseRandomImage
{
	my ($dir, $Cache) = @_;
	my $file;
	
	# get a directory listing of all images in given directory
	# remove '.', '..', and all files that aren't gif, png, or jpg
	#
	opendir(IMAGES, $dir);
	my @Files = grep { $_ =~ /\.(gif|png|jpg|jpeg)$/i } readdir(IMAGES);
	closedir(IMAGES);

	my $max = scalar(@Files);
	if($max == 1)
	{
		$file =  "$dir/" . $Files[0];
	}
	elsif($max > 1)
	{
		# randomly choose an image from the given directory
		# call checkCache to ensure that the image hasn't been
		# recently used...
		#
		if($max == scalar @{$Cache})
		{
			$file = $$Cache[0];
			@{$Cache} = splice(@{$Cache}, sprintf("%.0f", scalar(@{$Cache})/2));
		}
		else
		{
			do
			{
				# generate a random number between 0 and max...
				#
				my $rand = rand ($max - 1);
				$rand = sprintf("%.0f", $rand); # round to nearest integer
				$file = "$dir/" . $Files[$rand];
			}
			while(_checkCache($file, $Cache));
		}
	}
	
	return $file;
}

sub _refreshDesktop
{
	my ($file) = @_;

	# call xfdesktop and update image
	#
	system("ln -sf \'$file\' $ENV{HOME}/.config/xfce4/xfcedd/.desktopImage");
	system("xfdesktop");

	return undef;
}

sub _checkCache
{
	my ($file, $Cache) = @_;

	for(my $i = 0; $i < scalar @{$Cache}; $i++)
	{
		return 1 if $$Cache[$i] eq $file;
	}

	return 0;
}

sub _updateCache
{
	my ($file, $max, $Cache) = @_;
	my $size = scalar @{$Cache};
	
	if($size > $max)
	{
		# shorten cache to equal maximum allowed size
		#
		splice(@{$Cache}, 0, ($size - $max) + 1);
	}
	elsif(scalar $size == $max)
	{
		# remove the 1st list element
		#
		shift(@{$Cache});
	}

	# push new file onto cache list
	#
	push @{$Cache}, $file;

	return undef;
}

sub _writeToLog
{
	my ($message, $file, $maxSize) = @_;
	my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime();
	$message = "(" . sprintf("%.1d", $mday) . "/" . sprintf("%.2d", ++$mon) . "/" . (1900 + $year) . " $hour:$min) - $message";
	
	my @Log;
	if(-e $file)
	{
		open(LOGFILE, "<", $file);
		@Log = <LOGFILE>;
		close(LOGFILE);
	}

	# if size of log is greater than maxSize, trim
	# file to max
	#
	if($maxSize <= scalar @Log)
	{
		# push new message onto list of current...
		#
		push @Log, $message;
	
		open(LOGFILE, ">", $file);
		print LOGFILE $_ for splice(@Log, (scalar @Log - $maxSize));
		close(LOGFILE);
	}
	else
	{
		open(LOGFILE, ">>", $file);
		print LOGFILE $message;
		close(LOGFILE);
	}
}
